import Head from 'next/head';
import { Inter } from '@next/font/google';
import styles from '@/styles/Home.module.css';
import graphqlConnect from '../lib/graphql-client';
import { gql, GraphQLClient } from 'graphql-request';

// import { gql } from '@apollo/client';
import client from './../../apollo-client';
import GraphImage from '@graphcms/react-image';

const inter = Inter({ subsets: ['latin'] });

export default function Home({ data }) {
  // console.log(data.demoModels.flexBlocks);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {data.demoModels.map((singleData) => (
        <div
          key={singleData.id}
          className="rounded p-4 mb-8 border border-stone-400"
        >
          <ul>
            <li>{'title:' + singleData.title}</li>
            <li>{'slug:' + singleData.slug}</li>
            <li>{'sub:' + singleData.subtitle}</li>
            {/* <li>{singleData.updatedAt}</li> */}
          </ul>
          <div className="image-container">
            {singleData.flexBlocks.map((block, index) => (
              <div key={block.id}>
                {/* {block.imageLeft && block.imageRight && (
                  <div>Has Both Images</div>
                )} */}
                {/* Image {index}: {JSON.stringify(block.image)} */}
                <div className="flex flex-row">
                  <div className="flex-1 bg-red-300">
                    {block.imageLeft && (
                      <GraphImage
                        key={block.imageLeft.id}
                        image={{
                          handle: block.imageLeft.handle,
                          width: block.imageLeft.width,
                          height: block.imageLeft.height,
                        }}
                      />
                    )}
                  </div>
                  <div className="flex-1 bg-green-300">
                    {block.imageRight && (
                      <GraphImage
                        key={block.imageRight.id}
                        image={{
                          handle: block.imageRight.handle,
                          width: block.imageRight.width,
                          height: block.imageRight.height,
                        }}
                      />
                    )}
                  </div>
                </div>

                {block.image && (
                  <GraphImage
                    key={block.image.id}
                    image={{
                      handle: block.image.handle,
                      width: block.image.width,
                      height: block.image.height,
                    }}
                  />
                )}
              </div>
            ))}
          </div>
        </div>
      ))}
    </>
  );
}

const query = gql`
  {
    demoModels {
      id
      title
      slug
      subtitle
      updatedAt
      flexBlocks {
        ... on Image1Column {
          id
          image {
            id
            height
            width
            handle
          }
        }
        ... on Image2Column {
          id
          imageRight {
            id
            width
            handle
            height
          }
          imageLeft {
            id
            width
            handle
            height
          }
        }
      }
    }
  }
`;

export async function getStaticProps() {
  // envs with NEXT_PUBLIC_ are exposed to the browser
  const hygraph = new GraphQLClient(process.env.HYGRAPH_CONTENT_API);

  const data = await hygraph.request(query);

  return {
    props: {
      data,
    },
  };
}

/* export async function getStaticProps() {
  const { data } = await client.query({
    query: query,
  });

  return {
    props: {
      data,
    },
  };
}
 */
